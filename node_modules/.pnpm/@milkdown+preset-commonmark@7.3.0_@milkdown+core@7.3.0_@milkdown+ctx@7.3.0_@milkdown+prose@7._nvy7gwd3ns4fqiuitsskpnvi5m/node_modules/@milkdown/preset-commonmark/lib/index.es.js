import { $markAttr as V, $markSchema as j, $command as y, $useKeymap as N, $node as ot, $nodeAttr as I, $nodeSchema as C, $ctx as ne, $inputRule as w, pipe as Tt, $prose as O, $remark as $ } from "@milkdown/utils";
import { remarkStringifyOptionsCtx as st, commandsCtx as h, editorViewCtx as X, serializerCtx as Rt, parserCtx as Kt } from "@milkdown/core";
import { toggleMark as oe, setBlockType as E, wrapIn as se } from "@milkdown/prose/commands";
import { Fragment as Dt } from "@milkdown/prose/model";
import { expectDomTypeError as A } from "@milkdown/exception";
import { textblockTypeInputRule as lt, wrappingInputRule as le, InputRule as it } from "@milkdown/prose/inputrules";
import Pt from "@sindresorhus/slugify";
import { TextSelection as G, Selection as ct, PluginKey as T, Plugin as R } from "@milkdown/prose/state";
import { findSelectedNodeOfType as _t } from "@milkdown/prose";
import { sinkListItem as Et, liftListItem as dt, splitListItem as $t } from "@milkdown/prose/schema-list";
import { ReplaceStep as qt, AddMarkStep as Wt } from "@milkdown/prose/transform";
import { Decoration as at, DecorationSet as nt } from "@milkdown/prose/view";
import { visit as ie } from "unist-util-visit";
import Ft from "remark-inline-links";
const mt = (t, e) => {
  var o;
  if (!(e.childCount >= 1 && ((o = e.lastChild) == null ? void 0 : o.type.name) === "hardbreak")) {
    t.next(e.content);
    return;
  }
  const a = [];
  e.content.forEach((s, i, l) => {
    l !== e.childCount - 1 && a.push(s);
  }), t.next(Dt.fromArray(a));
}, n = (t, e) => (Object.assign(t, {
  meta: {
    package: "@milkdown/preset-commonmark",
    ...e
  }
}), t), ce = V("emphasis");
n(ce, {
  displayName: "Attr<emphasis>",
  group: "Emphasis"
});
const z = j("emphasis", (t) => ({
  attrs: {
    marker: {
      default: t.get(st).emphasis || "*"
    }
  },
  parseDOM: [
    { tag: "i" },
    { tag: "em" },
    { style: "font-style", getAttrs: (e) => e === "italic" }
  ],
  toDOM: (e) => ["em", t.get(ce.key)(e)],
  parseMarkdown: {
    match: (e) => e.type === "emphasis",
    runner: (e, r, a) => {
      e.openMark(a, { marker: r.marker }), e.next(r.children), e.closeMark(a);
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "emphasis",
    runner: (e, r) => {
      e.withMark(r, "emphasis", void 0, {
        marker: r.attrs.marker
      });
    }
  }
}));
n(z.mark, {
  displayName: "MarkSchema<emphasis>",
  group: "Emphasis"
});
n(z.ctx, {
  displayName: "MarkSchemaCtx<emphasis>",
  group: "Emphasis"
});
const de = y("ToggleEmphasis", (t) => () => oe(z.type(t)));
n(de, {
  displayName: "Command<toggleEmphasisCommand>",
  group: "Emphasis"
});
const me = N("emphasisKeymap", {
  ToggleEmphasis: {
    shortcuts: "Mod-i",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(de.key);
    }
  }
});
n(me.ctx, {
  displayName: "KeymapCtx<emphasis>",
  group: "Emphasis"
});
n(me.shortcuts, {
  displayName: "Keymap<emphasis>",
  group: "Emphasis"
});
const ue = V("strong");
n(ue, {
  displayName: "Attr<strong>",
  group: "Strong"
});
const U = j("strong", (t) => ({
  attrs: {
    marker: {
      default: t.get(st).strong || "*"
    }
  },
  parseDOM: [
    { tag: "b" },
    { tag: "strong" },
    { style: "font-style", getAttrs: (e) => e === "bold" }
  ],
  toDOM: (e) => ["strong", t.get(ue.key)(e)],
  parseMarkdown: {
    match: (e) => e.type === "strong",
    runner: (e, r, a) => {
      e.openMark(a, { marker: r.marker }), e.next(r.children), e.closeMark(a);
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "strong",
    runner: (e, r) => {
      e.withMark(r, "strong", void 0, {
        marker: r.attrs.marker
      });
    }
  }
}));
n(U.mark, {
  displayName: "MarkSchema<strong>",
  group: "Strong"
});
n(U.ctx, {
  displayName: "MarkSchemaCtx<strong>",
  group: "Strong"
});
const pe = y("ToggleStrong", (t) => () => oe(U.type(t)));
n(pe, {
  displayName: "Command<toggleStrongCommand>",
  group: "Strong"
});
const ge = N("strongKeymap", {
  ToggleBold: {
    shortcuts: ["Mod-b"],
    command: (t) => {
      const e = t.get(h);
      return () => e.call(pe.key);
    }
  }
});
n(ge.ctx, {
  displayName: "KeymapCtx<strong>",
  group: "Strong"
});
n(ge.shortcuts, {
  displayName: "Keymap<strong>",
  group: "Strong"
});
const ye = V("inlineCode");
n(ye, {
  displayName: "Attr<inlineCode>",
  group: "InlineCode"
});
const x = j("inlineCode", (t) => ({
  priority: 100,
  code: !0,
  inclusive: !1,
  parseDOM: [{ tag: "code" }],
  toDOM: (e) => ["code", t.get(ye.key)(e)],
  parseMarkdown: {
    match: (e) => e.type === "inlineCode",
    runner: (e, r, a) => {
      e.openMark(a), e.addText(r.value), e.closeMark(a);
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "inlineCode",
    runner: (e, r, a) => {
      e.withMark(r, "inlineCode", a.text || "");
    }
  }
}));
n(x.mark, {
  displayName: "MarkSchema<inlineCode>",
  group: "InlineCode"
});
n(x.ctx, {
  displayName: "MarkSchemaCtx<inlineCode>",
  group: "InlineCode"
});
const he = y("ToggleInlineCode", (t) => () => (e, r) => {
  const { selection: a, tr: o } = e;
  if (a.empty)
    return !1;
  const { from: s, to: i } = a;
  return e.doc.rangeHasMark(s, i, x.type(t)) ? (r == null || r(o.removeMark(s, i, x.type(t))), !0) : (Object.keys(e.schema.marks).filter((d) => d !== x.type.name).map((d) => e.schema.marks[d]).forEach((d) => {
    o.removeMark(s, i, d);
  }), r == null || r(o.addMark(s, i, x.type(t).create())), !0);
});
n(he, {
  displayName: "Command<toggleInlineCodeCommand>",
  group: "InlineCode"
});
const ke = N("inlineCodeKeymap", {
  ToggleInlineCode: {
    shortcuts: "Mod-e",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(he.key);
    }
  }
});
n(ke.ctx, {
  displayName: "KeymapCtx<inlineCode>",
  group: "InlineCode"
});
n(ke.shortcuts, {
  displayName: "Keymap<inlineCode>",
  group: "InlineCode"
});
const fe = V("link");
n(fe, {
  displayName: "Attr<link>",
  group: "Link"
});
const B = j("link", (t) => ({
  attrs: {
    href: {},
    title: { default: null }
  },
  parseDOM: [
    {
      tag: "a[href]",
      getAttrs: (e) => {
        if (!(e instanceof HTMLElement))
          throw A(e);
        return { href: e.getAttribute("href"), title: e.getAttribute("title") };
      }
    }
  ],
  toDOM: (e) => ["a", { ...t.get(fe.key)(e), ...e.attrs }],
  parseMarkdown: {
    match: (e) => e.type === "link",
    runner: (e, r, a) => {
      const o = r.url, s = r.title;
      e.openMark(a, { href: o, title: s }), e.next(r.children), e.closeMark(a);
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "link",
    runner: (e, r) => {
      e.withMark(r, "link", void 0, {
        title: r.attrs.title,
        url: r.attrs.href
      });
    }
  }
}));
n(B.mark, {
  displayName: "MarkSchema<link>",
  group: "Link"
});
const ut = y("ToggleLink", (t) => (e = {}) => oe(B.type(t), e));
n(ut, {
  displayName: "Command<toggleLinkCommand>",
  group: "Link"
});
const pt = y("UpdateLink", (t) => (e = {}) => (r, a) => {
  if (!a)
    return !1;
  let o, s = -1;
  const { selection: i } = r, { from: l, to: c } = i;
  if (r.doc.nodesBetween(l, l === c ? c + 1 : c, (p, f) => {
    if (B.type(t).isInSet(p.marks))
      return o = p, s = f, !1;
  }), !o)
    return !1;
  const d = o.marks.find(({ type: p }) => p === B.type(t));
  if (!d)
    return !1;
  const m = s, g = s + o.nodeSize, { tr: u } = r, k = B.type(t).create({ ...d.attrs, ...e });
  return k ? (a(
    u.removeMark(m, g, d).addMark(m, g, k).setSelection(new G(u.selection.$anchor)).scrollIntoView()
  ), !0) : !1;
});
n(pt, {
  displayName: "Command<updateLinkCommand>",
  group: "Link"
});
const gt = ot("doc", () => ({
  content: "block+",
  parseMarkdown: {
    match: ({ type: t }) => t === "root",
    runner: (t, e, r) => {
      t.injectRoot(e, r);
    }
  },
  toMarkdown: {
    match: (t) => t.type.name === "doc",
    runner: (t, e) => {
      t.openNode("root"), t.next(e.content);
    }
  }
}));
n(gt, {
  displayName: "NodeSchema<doc>",
  group: "Doc"
});
const Ne = I("paragraph");
n(Ne, {
  displayName: "Attr<paragraph>",
  group: "Paragraph"
});
const v = C("paragraph", (t) => ({
  content: "inline*",
  group: "block",
  parseDOM: [{ tag: "p" }],
  toDOM: (e) => ["p", t.get(Ne.key)(e), 0],
  parseMarkdown: {
    match: (e) => e.type === "paragraph",
    runner: (e, r, a) => {
      e.openNode(a), r.children ? e.next(r.children) : e.addText(r.value || ""), e.closeNode();
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "paragraph",
    runner: (e, r) => {
      e.openNode("paragraph"), mt(e, r), e.closeNode();
    }
  }
}));
n(v.node, {
  displayName: "NodeSchema<paragraph>",
  group: "Paragraph"
});
n(v.ctx, {
  displayName: "NodeSchemaCtx<paragraph>",
  group: "Paragraph"
});
const Ie = y("TurnIntoText", (t) => () => E(v.type(t)));
n(Ie, {
  displayName: "Command<turnIntoTextCommand>",
  group: "Paragraph"
});
const Ce = N("paragraphKeymap", {
  TurnIntoText: {
    shortcuts: "Mod-Alt-0",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(Ie.key);
    }
  }
});
n(Ce.ctx, {
  displayName: "KeymapCtx<paragraph>",
  group: "Paragraph"
});
n(Ce.shortcuts, {
  displayName: "Keymap<paragraph>",
  group: "Paragraph"
});
const Gt = Array(6).fill(0).map((t, e) => e + 1), Vt = (t) => Pt(t.textContent), Y = ne(Vt, "headingIdGenerator");
n(Y, {
  displayName: "Ctx<HeadingIdGenerator>",
  group: "Heading"
});
const Me = I("heading");
n(Me, {
  displayName: "Attr<heading>",
  group: "Heading"
});
const H = C("heading", (t) => {
  const e = t.get(Y.key);
  return {
    content: "inline*",
    group: "block",
    defining: !0,
    attrs: {
      id: {
        default: ""
      },
      level: {
        default: 1
      }
    },
    parseDOM: Gt.map((r) => ({
      tag: `h${r}`,
      getAttrs: (a) => {
        if (!(a instanceof HTMLElement))
          throw A(a);
        return { level: r, id: a.id };
      }
    })),
    toDOM: (r) => [
      `h${r.attrs.level}`,
      {
        ...t.get(Me.key)(r),
        id: r.attrs.id || e(r)
      },
      0
    ],
    parseMarkdown: {
      match: ({ type: r }) => r === "heading",
      runner: (r, a, o) => {
        const s = a.depth;
        r.openNode(o, { level: s }), r.next(a.children), r.closeNode();
      }
    },
    toMarkdown: {
      match: (r) => r.type.name === "heading",
      runner: (r, a) => {
        r.openNode("heading", void 0, { depth: a.attrs.level }), mt(r, a), r.closeNode();
      }
    }
  };
});
n(H.node, {
  displayName: "NodeSchema<heading>",
  group: "Heading"
});
n(H.ctx, {
  displayName: "NodeSchemaCtx<heading>",
  group: "Heading"
});
const yt = w((t) => lt(/^(?<hashes>#+)\s$/, H.type(t), (e) => {
  var i, l;
  const r = ((l = (i = e.groups) == null ? void 0 : i.hashes) == null ? void 0 : l.length) || 0, a = t.get(X), { $from: o } = a.state.selection, s = o.node();
  if (s.type.name === "heading") {
    let c = Number(s.attrs.level) + Number(r);
    return c > 6 && (c = 6), { level: c };
  }
  return { level: r };
}));
n(yt, {
  displayName: "InputRule<wrapInHeadingInputRule>",
  group: "Heading"
});
const b = y("WrapInHeading", (t) => (e) => (e ?? (e = 1), e < 1 ? E(v.type(t)) : E(H.type(t), { level: e })));
n(b, {
  displayName: "Command<wrapInHeadingCommand>",
  group: "Heading"
});
const be = y("DowngradeHeading", (t) => () => (e, r, a) => {
  const { $from: o } = e.selection, s = o.node();
  if (s.type !== H.type(t) || !e.selection.empty || o.parentOffset !== 0)
    return !1;
  const i = s.attrs.level - 1;
  return i ? (r == null || r(
    e.tr.setNodeMarkup(e.selection.$from.before(), void 0, {
      ...s.attrs,
      level: i
    })
  ), !0) : E(v.type(t))(e, r, a);
});
n(be, {
  displayName: "Command<downgradeHeadingCommand>",
  group: "Heading"
});
const Le = N("headingKeymap", {
  TurnIntoH1: {
    shortcuts: "Mod-Alt-1",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(b.key, 1);
    }
  },
  TurnIntoH2: {
    shortcuts: "Mod-Alt-2",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(b.key, 2);
    }
  },
  TurnIntoH3: {
    shortcuts: "Mod-Alt-3",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(b.key, 3);
    }
  },
  TurnIntoH4: {
    shortcuts: "Mod-Alt-4",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(b.key, 4);
    }
  },
  TurnIntoH5: {
    shortcuts: "Mod-Alt-5",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(b.key, 5);
    }
  },
  TurnIntoH6: {
    shortcuts: "Mod-Alt-6",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(b.key, 6);
    }
  },
  DowngradeHeading: {
    shortcuts: ["Delete", "Backspace"],
    command: (t) => {
      const e = t.get(h);
      return () => e.call(be.key);
    }
  }
});
n(Le.ctx, {
  displayName: "KeymapCtx<heading>",
  group: "Heading"
});
n(Le.shortcuts, {
  displayName: "Keymap<heading>",
  group: "Heading"
});
const xe = I("blockquote");
n(xe, {
  displayName: "Attr<blockquote>",
  group: "Blockquote"
});
const q = C("blockquote", (t) => ({
  content: "block+",
  group: "block",
  defining: !0,
  parseDOM: [{ tag: "blockquote" }],
  toDOM: (e) => ["blockquote", t.get(xe.key)(e), 0],
  parseMarkdown: {
    match: ({ type: e }) => e === "blockquote",
    runner: (e, r, a) => {
      e.openNode(a).next(r.children).closeNode();
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "blockquote",
    runner: (e, r) => {
      e.openNode("blockquote").next(r.content).closeNode();
    }
  }
}));
n(q.node, {
  displayName: "NodeSchema<blockquote>",
  group: "Blockquote"
});
n(q.ctx, {
  displayName: "NodeSchemaCtx<blockquote>",
  group: "Blockquote"
});
const ht = w((t) => le(/^\s*>\s$/, q.type(t)));
n(ht, {
  displayName: "InputRule<wrapInBlockquoteInputRule>",
  group: "Blockquote"
});
const Se = y("WrapInBlockquote", (t) => () => se(q.type(t)));
n(Se, {
  displayName: "Command<wrapInBlockquoteCommand>",
  group: "Blockquote"
});
const we = N("blockquoteKeymap", {
  WrapInBlockquote: {
    shortcuts: "Mod-Shift-b",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(Se.key);
    }
  }
});
n(we.ctx, {
  displayName: "KeymapCtx<blockquote>",
  group: "Blockquote"
});
n(we.shortcuts, {
  displayName: "Keymap<blockquote>",
  group: "Blockquote"
});
const Ae = I("codeBlock", () => ({
  pre: {},
  code: {}
}));
n(Ae, {
  displayName: "Attr<codeBlock>",
  group: "CodeBlock"
});
const W = C("code_block", (t) => ({
  content: "text*",
  group: "block",
  marks: "",
  defining: !0,
  code: !0,
  attrs: {
    language: {
      default: ""
    }
  },
  parseDOM: [
    {
      tag: "pre",
      preserveWhitespace: "full",
      getAttrs: (e) => {
        if (!(e instanceof HTMLElement))
          throw A(e);
        return { language: e.dataset.language };
      }
    }
  ],
  toDOM: (e) => {
    const r = t.get(Ae.key)(e);
    return [
      "pre",
      {
        ...r.pre,
        "data-language": e.attrs.language
      },
      ["code", r.code, 0]
    ];
  },
  parseMarkdown: {
    match: ({ type: e }) => e === "code",
    runner: (e, r, a) => {
      const o = r.lang, s = r.value;
      e.openNode(a, { language: o }), s && e.addText(s), e.closeNode();
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "code_block",
    runner: (e, r) => {
      var a;
      e.addNode("code", void 0, ((a = r.content.firstChild) == null ? void 0 : a.text) || "", {
        lang: r.attrs.language
      });
    }
  }
}));
n(W.node, {
  displayName: "NodeSchema<codeBlock>",
  group: "CodeBlock"
});
n(W.ctx, {
  displayName: "NodeSchemaCtx<codeBlock>",
  group: "CodeBlock"
});
const kt = w((t) => lt(/^```(?<language>[a-z]*)?[\s\n]$/, W.type(t), (e) => {
  var r;
  return {
    language: ((r = e.groups) == null ? void 0 : r.language) ?? ""
  };
}));
n(kt, {
  displayName: "InputRule<createCodeBlockInputRule>",
  group: "CodeBlock"
});
const ve = y("CreateCodeBlock", (t) => (e = "") => E(W.type(t), { language: e }));
n(ve, {
  displayName: "Command<createCodeBlockCommand>",
  group: "CodeBlock"
});
const jt = y("UpdateCodeBlockLanguage", () => ({ pos: t, language: e } = { pos: -1, language: "" }) => (r, a) => t >= 0 ? (a == null || a(r.tr.setNodeAttribute(t, "language", e)), !0) : !1);
n(jt, {
  displayName: "Command<updateCodeBlockLanguageCommand>",
  group: "CodeBlock"
});
const He = N("codeBlockKeymap", {
  CreateCodeBlock: {
    shortcuts: "Mod-Alt-c",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(ve.key);
    }
  }
});
n(He.ctx, {
  displayName: "KeymapCtx<codeBlock>",
  group: "CodeBlock"
});
n(He.shortcuts, {
  displayName: "Keymap<codeBlock>",
  group: "CodeBlock"
});
const Be = I("image");
n(Be, {
  displayName: "Attr<image>",
  group: "Image"
});
const K = C("image", (t) => ({
  inline: !0,
  group: "inline",
  selectable: !0,
  draggable: !0,
  marks: "",
  atom: !0,
  defining: !0,
  isolating: !0,
  attrs: {
    src: { default: "" },
    alt: { default: "" },
    title: { default: "" }
  },
  parseDOM: [
    {
      tag: "img[src]",
      getAttrs: (e) => {
        if (!(e instanceof HTMLElement))
          throw A(e);
        return {
          src: e.getAttribute("src") || "",
          alt: e.getAttribute("alt") || "",
          title: e.getAttribute("title") || e.getAttribute("alt") || ""
        };
      }
    }
  ],
  toDOM: (e) => ["img", { ...t.get(Be.key)(e), ...e.attrs }],
  parseMarkdown: {
    match: ({ type: e }) => e === "image",
    runner: (e, r, a) => {
      const o = r.url, s = r.alt, i = r.title;
      e.addNode(a, {
        src: o,
        alt: s,
        title: i
      });
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "image",
    runner: (e, r) => {
      e.addNode("image", void 0, void 0, {
        title: r.attrs.title,
        url: r.attrs.src,
        alt: r.attrs.alt
      });
    }
  }
}));
n(K.node, {
  displayName: "NodeSchema<image>",
  group: "Image"
});
n(K.ctx, {
  displayName: "NodeSchemaCtx<image>",
  group: "Image"
});
const ft = y("InsertImage", (t) => (e = {}) => (r, a) => {
  if (!a)
    return !0;
  const { src: o = "", alt: s = "", title: i = "" } = e, l = K.type(t).create({ src: o, alt: s, title: i });
  return l && a(r.tr.replaceSelectionWith(l).scrollIntoView()), !0;
});
n(ft, {
  displayName: "Command<insertImageCommand>",
  group: "Image"
});
const Nt = y("UpdateImage", (t) => (e = {}) => (r, a) => {
  const o = _t(r.selection, K.type(t));
  if (!o)
    return !1;
  const { node: s, pos: i } = o, l = { ...s.attrs }, { src: c, alt: d, title: m } = e;
  return c !== void 0 && (l.src = c), d !== void 0 && (l.alt = d), m !== void 0 && (l.title = m), a == null || a(r.tr.setNodeMarkup(i, void 0, l).scrollIntoView()), !0;
});
n(Nt, {
  displayName: "Command<updateImageCommand>",
  group: "Image"
});
const zt = w((t) => new it(
  /!\[(?<alt>.*?)]\((?<filename>.*?)\s*(?="|\))"?(?<title>[^"]+)?"?\)/,
  (e, r, a, o) => {
    const [s, i, l = "", c] = r;
    return s ? e.tr.replaceWith(a, o, K.type(t).create({ src: l, alt: i, title: c })) : null;
  }
));
n(zt, {
  displayName: "InputRule<insertImageInputRule>",
  group: "Image"
});
const Oe = I("hardbreak", (t) => ({
  "data-is-inline": t.attrs.isInline
}));
n(Oe, {
  displayName: "Attr<hardbreak>",
  group: "Hardbreak"
});
const S = C("hardbreak", (t) => ({
  inline: !0,
  group: "inline",
  attrs: {
    isInline: {
      default: !1
    }
  },
  selectable: !1,
  parseDOM: [{ tag: "br" }],
  toDOM: (e) => ["br", t.get(Oe.key)(e)],
  parseMarkdown: {
    match: ({ type: e }) => e === "break",
    runner: (e, r, a) => {
      var o;
      e.addNode(a, { isInline: !!((o = r.data) != null && o.isInline) });
    }
  },
  leafText: () => `
`,
  toMarkdown: {
    match: (e) => e.type.name === "hardbreak",
    runner: (e, r) => {
      r.attrs.isInline ? e.addNode("text", void 0, `
`) : e.addNode("break");
    }
  }
}));
n(S.node, {
  displayName: "NodeSchema<hardbreak>",
  group: "Hardbreak"
});
n(S.ctx, {
  displayName: "NodeSchemaCtx<hardbreak>",
  group: "Hardbreak"
});
const Te = y("InsertHardbreak", (t) => () => (e, r) => {
  var s;
  const { selection: a, tr: o } = e;
  if (a.empty) {
    const i = a.$from.node();
    if (i.childCount > 0 && ((s = i.lastChild) == null ? void 0 : s.type.name) === "hardbreak")
      return r == null || r(
        o.replaceRangeWith(a.to - 1, a.to, e.schema.node("paragraph")).setSelection(ct.near(o.doc.resolve(a.to))).scrollIntoView()
      ), !0;
  }
  return r == null || r(o.setMeta("hardbreak", !0).replaceSelectionWith(S.type(t).create()).scrollIntoView()), !0;
});
n(Te, {
  displayName: "Command<insertHardbreakCommand>",
  group: "Hardbreak"
});
const Re = N("hardbreakKeymap", {
  InsertHardbreak: {
    shortcuts: "Shift-Enter",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(Te.key);
    }
  }
});
n(Re.ctx, {
  displayName: "KeymapCtx<hardbreak>",
  group: "Hardbreak"
});
n(Re.shortcuts, {
  displayName: "Keymap<hardbreak>",
  group: "Hardbreak"
});
const Ke = I("hr");
n(Ke, {
  displayName: "Attr<hr>",
  group: "Hr"
});
const F = C("hr", (t) => ({
  group: "block",
  parseDOM: [{ tag: "hr" }],
  toDOM: (e) => ["hr", t.get(Ke.key)(e)],
  parseMarkdown: {
    match: ({ type: e }) => e === "thematicBreak",
    runner: (e, r, a) => {
      e.addNode(a);
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "hr",
    runner: (e) => {
      e.addNode("thematicBreak");
    }
  }
}));
n(F.node, {
  displayName: "NodeSchema<hr>",
  group: "Hr"
});
n(F.ctx, {
  displayName: "NodeSchemaCtx<hr>",
  group: "Hr"
});
const It = w((t) => new it(
  /^(?:---|___\s|\*\*\*\s)$/,
  (e, r, a, o) => {
    const { tr: s } = e;
    return r[0] && s.replaceWith(a - 1, o, F.type(t).create()), s;
  }
));
n(It, {
  displayName: "InputRule<insertHrInputRule>",
  group: "Hr"
});
const Ct = y("InsertHr", (t) => () => (e, r) => {
  if (!r)
    return !0;
  const a = v.node.type(t).create(), { tr: o, selection: s } = e, { from: i } = s, l = F.type(t).create();
  if (!l)
    return !0;
  const c = o.replaceSelectionWith(l).insert(i, a), d = ct.findFrom(c.doc.resolve(i), 1, !0);
  return d && r(c.setSelection(d).scrollIntoView()), !0;
});
n(Ct, {
  displayName: "Command<insertHrCommand>",
  group: "Hr"
});
const De = I("bulletList");
n(De, {
  displayName: "Attr<bulletList>",
  group: "BulletList"
});
const D = C("bullet_list", (t) => ({
  content: "listItem+",
  group: "block",
  attrs: {
    spread: {
      default: !1
    }
  },
  parseDOM: [
    {
      tag: "ul",
      getAttrs: (e) => {
        if (!(e instanceof HTMLElement))
          throw A(e);
        return {
          spread: e.dataset.spread
        };
      }
    }
  ],
  toDOM: (e) => [
    "ul",
    {
      ...t.get(De.key)(e),
      "data-spread": e.attrs.spread
    },
    0
  ],
  parseMarkdown: {
    match: ({ type: e, ordered: r }) => e === "list" && !r,
    runner: (e, r, a) => {
      const o = r.spread != null ? `${r.spread}` : "false";
      e.openNode(a, { spread: o }).next(r.children).closeNode();
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "bullet_list",
    runner: (e, r) => {
      e.openNode("list", void 0, { ordered: !1, spread: r.attrs.spread === "true" }).next(r.content).closeNode();
    }
  }
}));
n(D.node, {
  displayName: "NodeSchema<bulletList>",
  group: "BulletList"
});
n(D.ctx, {
  displayName: "NodeSchemaCtx<bulletList>",
  group: "BulletList"
});
const Mt = w((t) => le(/^\s*([-+*])\s$/, D.type(t)));
n(Mt, {
  displayName: "InputRule<wrapInBulletListInputRule>",
  group: "BulletList"
});
const Pe = y("WrapInBulletList", (t) => () => se(D.type(t)));
n(Pe, {
  displayName: "Command<wrapInBulletListCommand>",
  group: "BulletList"
});
const _e = N("bulletListKeymap", {
  WrapInBulletList: {
    shortcuts: "Mod-Alt-8",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(Pe.key);
    }
  }
});
n(_e.ctx, {
  displayName: "KeymapCtx<bulletListKeymap>",
  group: "BulletList"
});
n(_e.shortcuts, {
  displayName: "Keymap<bulletListKeymap>",
  group: "BulletList"
});
const Ee = I("orderedList");
n(Ee, {
  displayName: "Attr<orderedList>",
  group: "OrderedList"
});
const P = C("ordered_list", (t) => ({
  content: "listItem+",
  group: "block",
  attrs: {
    order: {
      default: 1
    },
    spread: {
      default: !1
    }
  },
  parseDOM: [
    {
      tag: "ol",
      getAttrs: (e) => {
        if (!(e instanceof HTMLElement))
          throw A(e);
        return {
          spread: e.dataset.spread,
          order: e.hasAttribute("start") ? Number(e.getAttribute("start")) : 1
        };
      }
    }
  ],
  toDOM: (e) => [
    "ol",
    {
      ...t.get(Ee.key)(e),
      ...e.attrs.order === 1 ? {} : e.attrs.order,
      "data-spread": e.attrs.spread
    },
    0
  ],
  parseMarkdown: {
    match: ({ type: e, ordered: r }) => e === "list" && !!r,
    runner: (e, r, a) => {
      const o = r.spread != null ? `${r.spread}` : "true";
      e.openNode(a, { spread: o }).next(r.children).closeNode();
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "ordered_list",
    runner: (e, r) => {
      e.openNode("list", void 0, { ordered: !0, start: 1, spread: r.attrs.spread === "true" }), e.next(r.content), e.closeNode();
    }
  }
}));
n(P.node, {
  displayName: "NodeSchema<orderedList>",
  group: "OrderedList"
});
n(P.ctx, {
  displayName: "NodeSchemaCtx<orderedList>",
  group: "OrderedList"
});
const bt = w((t) => le(
  /^\s*(\d+)\.\s$/,
  P.type(t),
  (e) => ({ order: Number(e[1]) }),
  (e, r) => r.childCount + r.attrs.order === Number(e[1])
));
n(bt, {
  displayName: "InputRule<wrapInOrderedListInputRule>",
  group: "OrderedList"
});
const $e = y("WrapInOrderedList", (t) => () => se(P.type(t)));
n($e, {
  displayName: "Command<wrapInOrderedListCommand>",
  group: "OrderedList"
});
const qe = N("orderedListKeymap", {
  WrapInOrderedList: {
    shortcuts: "Mod-Alt-7",
    command: (t) => {
      const e = t.get(h);
      return () => e.call($e.key);
    }
  }
});
n(qe.ctx, {
  displayName: "KeymapCtx<orderedList>",
  group: "OrderedList"
});
n(qe.shortcuts, {
  displayName: "Keymap<orderedList>",
  group: "OrderedList"
});
const We = I("listItem");
n(We, {
  displayName: "Attr<listItem>",
  group: "ListItem"
});
const M = C("list_item", (t) => ({
  group: "listItem",
  content: "paragraph block*",
  attrs: {
    label: {
      default: "•"
    },
    listType: {
      default: "bullet"
    },
    spread: {
      default: "true"
    }
  },
  defining: !0,
  parseDOM: [
    {
      tag: "li",
      getAttrs: (e) => {
        if (!(e instanceof HTMLElement))
          throw A(e);
        return {
          label: e.dataset.label,
          listType: e.dataset["list-type"],
          spread: e.dataset.spread
        };
      }
    }
  ],
  toDOM: (e) => [
    "li",
    {
      ...t.get(We.key)(e),
      "data-label": e.attrs.label,
      "data-list-type": e.attrs.listType,
      "data-spread": e.attrs.spread
    },
    0
  ],
  parseMarkdown: {
    match: ({ type: e }) => e === "listItem",
    runner: (e, r, a) => {
      const o = r.label != null ? `${r.label}.` : "•", s = r.label != null ? "ordered" : "bullet", i = r.spread != null ? `${r.spread}` : "true";
      e.openNode(a, { label: o, listType: s, spread: i }), e.next(r.children), e.closeNode();
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "list_item",
    runner: (e, r) => {
      e.openNode("listItem", void 0, { spread: r.attrs.spread === "true" }), e.next(r.content), e.closeNode();
    }
  }
}));
n(M.node, {
  displayName: "NodeSchema<listItem>",
  group: "ListItem"
});
n(M.ctx, {
  displayName: "NodeSchemaCtx<listItem>",
  group: "ListItem"
});
const Fe = y("SinkListItem", (t) => () => Et(M.type(t)));
n(Fe, {
  displayName: "Command<sinkListItemCommand>",
  group: "ListItem"
});
const Ge = y("SplitListItem", (t) => () => dt(M.type(t)));
n(Ge, {
  displayName: "Command<liftListItemCommand>",
  group: "ListItem"
});
const Ve = y("SplitListItem", (t) => () => $t(M.type(t)));
n(Ve, {
  displayName: "Command<splitListItemCommand>",
  group: "ListItem"
});
const Ut = (t) => (e, r, a) => {
  const { selection: o } = e;
  if (!(o instanceof G))
    return !1;
  const { empty: s, $from: i } = o;
  if (!s || i.parentOffset !== 0)
    return !1;
  const l = i.node(-1);
  return l.type !== M.type(t) || l.firstChild !== i.node() || i.node(-2).childCount > 1 ? !1 : dt(M.type(t))(e, r, a);
}, je = y("LiftFirstListItem", (t) => () => Ut(t));
n(je, {
  displayName: "Command<liftFirstListItemCommand>",
  group: "ListItem"
});
const ze = N("listItemKeymap", {
  NextListItem: {
    shortcuts: "Enter",
    command: (t) => {
      const e = t.get(h);
      return () => e.call(Ve.key);
    }
  },
  SinkListItem: {
    shortcuts: ["Tab", "Mod-]"],
    command: (t) => {
      const e = t.get(h);
      return () => e.call(Fe.key);
    }
  },
  LiftListItem: {
    shortcuts: ["Shift-Tab", "Mod-["],
    command: (t) => {
      const e = t.get(h);
      return () => e.call(Ge.key);
    }
  },
  LiftFirstListItem: {
    shortcuts: ["Backspace", "Delete"],
    command: (t) => {
      const e = t.get(h);
      return () => e.call(je.key);
    }
  }
});
n(ze.ctx, {
  displayName: "KeymapCtx<listItem>",
  group: "ListItem"
});
n(ze.shortcuts, {
  displayName: "Keymap<listItem>",
  group: "ListItem"
});
const Lt = ot("text", () => ({
  group: "inline",
  parseMarkdown: {
    match: ({ type: t }) => t === "text",
    runner: (t, e) => {
      t.addText(e.value);
    }
  },
  toMarkdown: {
    match: (t) => t.type.name === "text",
    runner: (t, e) => {
      t.addNode("text", void 0, e.text);
    }
  }
}));
n(Lt, {
  displayName: "NodeSchema<text>",
  group: "Text"
});
const Ue = I("html");
n(Ue, {
  displayName: "Attr<html>",
  group: "Html"
});
const Ye = C("html", (t) => ({
  atom: !0,
  group: "inline",
  inline: !0,
  attrs: {
    value: {
      default: ""
    }
  },
  toDOM: (e) => {
    const r = document.createElement("span"), a = {
      ...t.get(Ue.key)(e),
      "data-value": e.attrs.value,
      "data-type": "html"
    };
    return r.textContent = e.attrs.value, ["span", a, e.attrs.value];
  },
  parseDOM: [{
    tag: 'span[data-type="html"]',
    getAttrs: (e) => ({
      value: e.dataset.value ?? ""
    })
  }],
  parseMarkdown: {
    match: ({ type: e }) => e === "html",
    runner: (e, r, a) => {
      e.addNode(a, { value: r.value });
    }
  },
  toMarkdown: {
    match: (e) => e.type.name === "html",
    runner: (e, r) => {
      e.addNode("html", void 0, r.attrs.value);
    }
  }
}));
n(Ye.node, {
  displayName: "NodeSchema<html>",
  group: "Html"
});
n(Ye.ctx, {
  displayName: "NodeSchemaCtx<html>",
  group: "Html"
});
const Yt = [
  gt,
  Ne,
  v,
  Y,
  Me,
  H,
  Oe,
  S,
  xe,
  q,
  Ae,
  W,
  Ke,
  F,
  Be,
  K,
  De,
  D,
  Ee,
  P,
  We,
  M,
  ce,
  z,
  ue,
  U,
  ye,
  x,
  fe,
  B,
  Ue,
  Ye,
  Lt
].flat(), Zt = [
  ht,
  Mt,
  bt,
  kt,
  It,
  yt
].flat(), Jt = [
  Ie,
  Se,
  b,
  be,
  ve,
  Te,
  Ct,
  ft,
  Nt,
  $e,
  Pe,
  Fe,
  Ve,
  Ge,
  je,
  de,
  he,
  pe,
  ut,
  pt
], Qt = [
  we,
  He,
  Re,
  Le,
  ze,
  qe,
  _e,
  Ce,
  me,
  ke,
  ge
].flat(), Xt = /\[([^\]]+)]\([^\s\]]+\)/, Q = /\[(?<span>((www|https:\/\/|http:\/\/)[^\s\]]+))]\((?<url>[^\s\]]+)\)/, er = (t) => new RegExp(`\\\\(?=[^\\w\\s${t}\\\\]|_)`, "g"), Z = "​", ee = `${Z}*`, te = `${Z}＊`, re = `${Z}_`, ae = `${Z}⎽`, tr = (t) => {
  let e = t, r = e.match(Q);
  for (; r && r.groups; ) {
    const { span: a } = r.groups;
    e = e.replace(Q, a), r = e.match(Q);
  }
  return e;
}, rr = (t) => t.replaceAll(/\\\\\*/g, ee).replaceAll(/\\\\_/g, re).replaceAll(ee, te).replaceAll(re, ae), ar = (t, e, r) => {
  const a = t.split(""), o = a[e];
  return a[e] && a[r] && (a[e] = a[r], a[r] = o), a.join("").toString();
}, nr = (t) => (e) => e.replace(er(t), ""), or = (t) => (e) => {
  const r = e.indexOf(t.hole), a = e.charAt(r - 1), o = e.charAt(r + 1), s = /[^\w]|_/;
  return o ? a && s.test(a) && s.test(o) ? t.punctuation : t.char : t.punctuation;
}, sr = (t, e, r) => {
  let a = e, o = !1;
  return t.descendants((s) => {
    var i;
    if (o)
      return !1;
    if (!s.textContent.includes(r))
      return a += s.nodeSize, !1;
    if (s.isText) {
      const l = (i = s.text) == null ? void 0 : i.indexOf(r);
      if (l != null && l >= 0)
        return o = !0, a += l, !1;
    }
    return a += 1, !0;
  }), a;
}, lr = {
  placeholderConfig: {
    hole: "∅",
    punctuation: "⁂",
    char: "∴"
  },
  globalNodes: ["footnote_definition"],
  shouldSyncNode: ({ prevNode: t, nextNode: e }) => t.inlineContent && e && t.type === e.type && !t.eq(e),
  movePlaceholder: (t, e) => {
    const r = ["*", "_"];
    let a = e.indexOf(t);
    for (; r.includes(e[a - 1] || "") && r.includes(e[a + 1] || ""); )
      e = ar(e, a, a + 1), a = a + 1;
    return e;
  }
}, _ = ne(lr, "inlineSyncConfig");
n(_, {
  displayName: "Ctx<inlineSyncConfig>",
  group: "Prose"
});
const ir = (t) => t.selection.$from.node(), cr = (t, e, r, a) => {
  const o = t.get(Rt), s = e.schema.topNodeType.create(void 0, [r, ...a]);
  return o(s);
}, dr = (t, e) => {
  const r = t.get(_.key), a = r.placeholderConfig.hole, [o = "", ...s] = e.split(`

`), i = (m) => r.movePlaceholder(a, m);
  let c = Tt(nr(a), i, tr, rr)(o);
  const d = or(r.placeholderConfig)(c);
  return c = c.replace(a, d), c = [c, ...s].join(`

`), [c, d];
}, mr = (t, e) => {
  const a = t.get(Kt)(e);
  return a ? a.firstChild : null;
}, ur = (t, e) => {
  const { globalNodes: r } = t.get(_.key), a = [];
  return e.doc.descendants((o) => {
    if (r.includes(o.type.name) || r.includes(o.type))
      return a.push(o), !1;
  }), a;
}, pr = (t) => t.split(`

`)[0] || "", gr = (t) => t.childCount === 1 && t.child(0).type.name === "html", xt = (t, e) => {
  try {
    const r = ur(t, e), a = ir(e), o = cr(t, e, a, r), [s, i] = dr(t, o), l = mr(t, s);
    return !l || a.type !== l.type || gr(l) ? null : (l.attrs = { ...a.attrs }, l.descendants((c) => {
      var g, u, k;
      const m = c.marks.find((p) => p.type.name === "link");
      m && ((g = c.text) != null && g.includes(i)) && m.attrs.href.includes(i) && (m.attrs.href = m.attrs.href.replace(i, "")), ((u = c.text) != null && u.includes(te) || (k = c.text) != null && k.includes(ae)) && (c.text = c.text.replaceAll(te, ee).replaceAll(ae, re));
    }), {
      text: pr(s),
      prevNode: a,
      nextNode: l,
      placeholder: i
    });
  } catch {
    return null;
  }
}, yr = (t, e, r, a, o) => {
  var L;
  const { placeholderConfig: s } = t.get(_.key), i = s.hole;
  let l = r.tr.setMeta(e, !0).insertText(i, r.selection.from);
  const c = r.apply(l), d = xt(t, c);
  if (!d)
    return;
  const m = d.text.slice(0, d.text.indexOf(d.placeholder)), { $from: g } = c.selection, u = g.before(), k = g.after(), p = sr(d.nextNode, u, d.placeholder);
  l = l.replaceWith(u, k, d.nextNode).setNodeMarkup(u, void 0, o).delete(p + 1, p + 2), l = l.setSelection(G.near(l.doc.resolve(p + 1))), (Xt.test(m) || ["*", "_", "~"].includes(m.at(-1) || "")) && l.selection instanceof G && (((L = l.selection.$cursor) == null ? void 0 : L.marks()) ?? []).forEach((J) => {
    l = l.removeStoredMark(J.type);
  }), a(l);
}, St = O((t) => {
  let e = null;
  const r = new T("MILKDOWN_INLINE_SYNC");
  return new R({
    key: r,
    state: {
      init: () => null,
      apply: (a, o, s, i) => {
        var p;
        const l = t.get(X);
        if (!((p = l.hasFocus) != null && p.call(l)) || !l.editable || !a.docChanged || a.getMeta(r))
          return null;
        const d = xt(t, i);
        if (!d)
          return null;
        e && (cancelAnimationFrame(e), e = null);
        const { prevNode: m, nextNode: g, text: u } = d, { shouldSyncNode: k } = t.get(_.key);
        return k({ prevNode: m, nextNode: g, ctx: t, tr: a, text: u }) && (e = requestAnimationFrame(() => {
          e = null;
          const { dispatch: f, state: L } = t.get(X);
          yr(t, r, L, f, m.attrs);
        })), null;
      }
    }
  });
});
n(St, {
  displayName: "Prose<inlineSyncPlugin>",
  group: "Prose"
});
const Ze = $("remarkAddOrderInList", () => () => (t) => {
  ie(t, "list", (e) => {
    if (e.ordered) {
      const r = e.start ?? 1;
      e.children.forEach((a, o) => {
        a.label = o + r;
      });
    }
  });
});
n(Ze.plugin, {
  displayName: "Remark<remarkAddOrderInListPlugin>",
  group: "Remark"
});
n(Ze.options, {
  displayName: "RemarkConfig<remarkAddOrderInListPlugin>",
  group: "Remark"
});
const Je = $("remarkLineBreak", () => () => (t) => {
  const e = /[\t ]*(?:\r?\n|\r)/g;
  ie(t, "text", (r, a, o) => {
    if (!r.value || typeof r.value != "string")
      return;
    const s = [];
    let i = 0;
    e.lastIndex = 0;
    let l = e.exec(r.value);
    for (; l; ) {
      const d = l.index;
      i !== d && s.push({ type: "text", value: r.value.slice(i, d) }), s.push({ type: "break", data: { isInline: !0 } }), i = d + l[0].length, l = e.exec(r.value);
    }
    if (s.length > 0 && o && typeof a == "number")
      return i < r.value.length && s.push({ type: "text", value: r.value.slice(i) }), o.children.splice(a, 1, ...s), a + s.length;
  });
});
n(Je.plugin, {
  displayName: "Remark<remarkLineBreak>",
  group: "Remark"
});
n(Je.options, {
  displayName: "RemarkConfig<remarkLineBreak>",
  group: "Remark"
});
const Qe = $("remarkInlineLink", () => Ft);
n(Qe.plugin, {
  displayName: "Remark<remarkInlineLinkPlugin>",
  group: "Remark"
});
n(Qe.options, {
  displayName: "RemarkConfig<remarkInlineLinkPlugin>",
  group: "Remark"
});
const hr = (t) => !!t.children, kr = (t) => t.type === "html";
function fr(t, e) {
  return r(t, 0, null)[0];
  function r(a, o, s) {
    if (hr(a)) {
      const i = [];
      for (let l = 0, c = a.children.length; l < c; l++) {
        const d = a.children[l];
        if (d) {
          const m = r(d, l, a);
          if (m)
            for (let g = 0, u = m.length; g < u; g++) {
              const k = m[g];
              k && i.push(k);
            }
        }
      }
      a.children = i;
    }
    return e(a, o, s);
  }
}
const Xe = $("remarkHTMLTransformer", () => () => (t) => {
  fr(t, (e, r, a) => kr(e) ? ((a == null ? void 0 : a.type) === "root" && (e.children = [{ ...e }], delete e.value, e.type = "paragraph"), [e]) : [e]);
});
n(Xe.plugin, {
  displayName: "Remark<remarkHtmlTransformer>",
  group: "Remark"
});
n(Xe.options, {
  displayName: "RemarkConfig<remarkHtmlTransformer>",
  group: "Remark"
});
const et = $("remarkMarker", () => () => (t, e) => {
  const r = (a) => e.value.charAt(a.position.start.offset);
  ie(t, (a) => ["strong", "emphasis"].includes(a.type), (a) => {
    a.marker = r(a);
  });
});
n(et.plugin, {
  displayName: "Remark<remarkMarker>",
  group: "Remark"
});
n(et.options, {
  displayName: "RemarkConfig<remarkMarker>",
  group: "Remark"
});
const wt = O(() => {
  let t = !1;
  const e = new T("MILKDOWN_INLINE_NODES_CURSOR"), r = new R({
    key: e,
    state: {
      init() {
        return !1;
      },
      apply(a) {
        if (!a.selection.empty)
          return !1;
        const o = a.selection.$from, s = o.nodeBefore, i = o.nodeAfter;
        return !!(s && i && s.isInline && !s.isText && i.isInline && !i.isText);
      }
    },
    props: {
      handleDOMEvents: {
        compositionend: (a, o) => t ? (t = !1, requestAnimationFrame(() => {
          if (r.getState(a.state)) {
            const i = a.state.selection.from;
            o.preventDefault(), a.dispatch(a.state.tr.insertText(o.data || "", i));
          }
        }), !0) : !1,
        compositionstart: (a) => (r.getState(a.state) && (t = !0), !1),
        beforeinput: (a, o) => {
          if (r.getState(a.state) && o instanceof InputEvent && o.data && !t) {
            const i = a.state.selection.from;
            return o.preventDefault(), a.dispatch(a.state.tr.insertText(o.data || "", i)), !0;
          }
          return !1;
        }
      },
      decorations(a) {
        if (r.getState(a)) {
          const i = a.selection.$from.pos, l = document.createElement("span"), c = at.widget(i, l, {
            side: -1
          }), d = document.createElement("span"), m = at.widget(i, d);
          return setTimeout(() => {
            l.contentEditable = "true", d.contentEditable = "true";
          }), nt.create(a.doc, [c, m]);
        }
        return nt.empty;
      }
    }
  });
  return r;
});
n(wt, {
  displayName: "Prose<inlineNodesCursorPlugin>",
  group: "Prose"
});
const At = O((t) => new R({
  key: new T("MILKDOWN_HARDBREAK_MARKS"),
  appendTransaction: (e, r, a) => {
    if (!e.length)
      return;
    const [o] = e;
    if (!o)
      return;
    const [s] = o.steps;
    if (o.getMeta("hardbreak")) {
      if (!(s instanceof qt))
        return;
      const { from: c } = s;
      return a.tr.setNodeMarkup(c, S.type(t), void 0, []);
    }
    if (s instanceof Wt) {
      let c = a.tr;
      const { from: d, to: m } = s;
      return a.doc.nodesBetween(d, m, (g, u) => {
        g.type === S.type(t) && (c = c.setNodeMarkup(u, S.type(t), void 0, []));
      }), c;
    }
  }
}));
n(At, {
  displayName: "Prose<hardbreakClearMarkPlugin>",
  group: "Prose"
});
const tt = ne(["table", "code_block"], "hardbreakFilterNodes");
n(tt, {
  displayName: "Ctx<hardbreakFilterNodes>",
  group: "Prose"
});
const vt = O((t) => {
  const e = t.get(tt.key);
  return new R({
    key: new T("MILKDOWN_HARDBREAK_FILTER"),
    filterTransaction: (r, a) => {
      const o = r.getMeta("hardbreak"), [s] = r.steps;
      if (o && s) {
        const { from: i } = s, l = a.doc.resolve(i);
        let c = l.depth, d = !0;
        for (; c > 0; )
          e.includes(l.node(c).type.name) && (d = !1), c--;
        return d;
      }
      return !0;
    }
  });
});
n(vt, {
  displayName: "Prose<hardbreakFilterPlugin>",
  group: "Prose"
});
const Ht = O((t) => {
  const e = new T("MILKDOWN_HEADING_ID"), r = (a) => {
    if (a.composing || !a.editable)
      return;
    const o = t.get(Y.key), s = a.state.tr.setMeta("addToHistory", !1);
    let i = !1;
    a.state.doc.descendants((l, c) => {
      if (l.type === H.type(t)) {
        if (l.textContent.trim().length === 0)
          return;
        const d = l.attrs, m = o(l);
        d.id !== m && (i = !0, s.setMeta(e, !0).setNodeMarkup(c, void 0, {
          ...d,
          id: m
        }));
      }
    }), i && a.dispatch(s);
  };
  return new R({
    key: e,
    view: (a) => (r(a), {
      update: (o) => {
        r(o);
      }
    })
  });
});
n(Ht, {
  displayName: "Prose<syncHeadingIdPlugin>",
  group: "Prose"
});
const Bt = O((t) => {
  const e = (r) => {
    if (r.composing || !r.editable)
      return;
    const a = P.type(t), o = D.type(t), s = M.type(t), i = r.state, l = (m, g) => {
      let u = !1;
      const k = `${g + 1}.`;
      return m.label !== k && (m.label = k, u = !0), u;
    };
    let c = i.tr, d = !1;
    i.doc.descendants((m, g, u, k) => {
      if (m.type === o) {
        const p = m.maybeChild(0);
        (p == null ? void 0 : p.type) === s && p.attrs.listType === "ordered" && (d = !0, c.setNodeMarkup(g, a, { spread: "true" }), m.descendants((f, L, Ot, J) => {
          if (f.type === s) {
            const rt = { ...f.attrs };
            l(rt, J) && (c = c.setNodeMarkup(L, void 0, rt));
          }
          return !1;
        }));
      } else if (m.type === s && (u == null ? void 0 : u.type) === a) {
        const p = { ...m.attrs };
        let f = !1;
        p.listType !== "ordered" && (p.listType = "ordered", f = !0), (u == null ? void 0 : u.maybeChild(0)) && (f = l(p, k)), f && (c = c.setNodeMarkup(g, void 0, p), d = !0);
      }
    }), d && r.dispatch(c.setMeta("addToHistory", !1));
  };
  return new R({
    key: new T("MILKDOWN_KEEP_LIST_ORDER"),
    view: (r) => (e(r), {
      update: (a) => {
        e(a);
      }
    })
  });
});
n(Bt, {
  displayName: "Prose<syncListOrderPlugin>",
  group: "Prose"
});
const Nr = [
  _,
  St,
  At,
  tt,
  vt,
  wt,
  Ze,
  Qe,
  Je,
  Xe,
  et,
  Ht,
  Bt
].flat(), Kr = [Yt, Zt, Jt, Qt, Nr].flat();
export {
  xe as blockquoteAttr,
  we as blockquoteKeymap,
  q as blockquoteSchema,
  De as bulletListAttr,
  _e as bulletListKeymap,
  D as bulletListSchema,
  Ae as codeBlockAttr,
  He as codeBlockKeymap,
  W as codeBlockSchema,
  Jt as commands,
  Kr as commonmark,
  ve as createCodeBlockCommand,
  kt as createCodeBlockInputRule,
  lr as defaultConfig,
  gt as docSchema,
  be as downgradeHeadingCommand,
  ce as emphasisAttr,
  me as emphasisKeymap,
  z as emphasisSchema,
  Oe as hardbreakAttr,
  At as hardbreakClearMarkPlugin,
  tt as hardbreakFilterNodes,
  vt as hardbreakFilterPlugin,
  Re as hardbreakKeymap,
  S as hardbreakSchema,
  Me as headingAttr,
  Y as headingIdGenerator,
  Le as headingKeymap,
  H as headingSchema,
  Ke as hrAttr,
  F as hrSchema,
  Ue as htmlAttr,
  Ye as htmlSchema,
  Be as imageAttr,
  K as imageSchema,
  ye as inlineCodeAttr,
  ke as inlineCodeKeymap,
  x as inlineCodeSchema,
  wt as inlineNodesCursorPlugin,
  _ as inlineSyncConfig,
  St as inlineSyncPlugin,
  Zt as inputrules,
  Te as insertHardbreakCommand,
  Ct as insertHrCommand,
  It as insertHrInputRule,
  ft as insertImageCommand,
  zt as insertImageInputRule,
  Qt as keymap,
  je as liftFirstListItemCommand,
  Ge as liftListItemCommand,
  fe as linkAttr,
  B as linkSchema,
  We as listItemAttr,
  ze as listItemKeymap,
  M as listItemSchema,
  Ee as orderedListAttr,
  qe as orderedListKeymap,
  P as orderedListSchema,
  Ne as paragraphAttr,
  Ce as paragraphKeymap,
  v as paragraphSchema,
  Nr as plugins,
  Ze as remarkAddOrderInListPlugin,
  Xe as remarkHtmlTransformer,
  Qe as remarkInlineLinkPlugin,
  Je as remarkLineBreak,
  et as remarkMarker,
  Yt as schema,
  Fe as sinkListItemCommand,
  Ve as splitListItemCommand,
  ue as strongAttr,
  ge as strongKeymap,
  U as strongSchema,
  Ht as syncHeadingIdPlugin,
  Bt as syncListOrderPlugin,
  Lt as textSchema,
  de as toggleEmphasisCommand,
  he as toggleInlineCodeCommand,
  ut as toggleLinkCommand,
  pe as toggleStrongCommand,
  Ie as turnIntoTextCommand,
  jt as updateCodeBlockLanguageCommand,
  Nt as updateImageCommand,
  pt as updateLinkCommand,
  Se as wrapInBlockquoteCommand,
  ht as wrapInBlockquoteInputRule,
  Pe as wrapInBulletListCommand,
  Mt as wrapInBulletListInputRule,
  b as wrapInHeadingCommand,
  yt as wrapInHeadingInputRule,
  $e as wrapInOrderedListCommand,
  bt as wrapInOrderedListInputRule
};
//# sourceMappingURL=index.es.js.map
